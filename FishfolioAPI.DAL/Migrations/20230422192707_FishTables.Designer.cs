// <auto-generated />
using System;
using FishfolioAPI.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FishfolioAPI.DAL.Migrations
{
    [DbContext(typeof(FishfolioDbContext))]
    [Migration("20230422192707_FishTables")]
    partial class FishTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FishfolioAPI.Model.Fish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableInStore")
                        .HasColumnType("int");

                    b.Property<int>("AvgSchoolSize")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FishFamilyId")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HabitatId")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxNumberOfSameGender")
                        .HasColumnType("int");

                    b.Property<int>("MinAquariumSizeInL")
                        .HasColumnType("int");

                    b.Property<int>("MinSchoolSize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WaterTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FishFamilyId");

                    b.HasIndex("HabitatId");

                    b.HasIndex("WaterTypeId");

                    b.ToTable("Fish");
                });

            modelBuilder.Entity("FishfolioAPI.Model.FishFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FishFamilies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tetra"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rasbora"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gourami"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Barb"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cichlid"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Betta"
                        });
                });

            modelBuilder.Entity("FishfolioAPI.Model.FishFamilyCompatibility", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("CompatibilityId")
                        .HasColumnType("int");

                    b.Property<int?>("CompatibleId")
                        .HasColumnType("int");

                    b.HasKey("ParentId", "CompatibilityId");

                    b.HasIndex("CompatibleId");

                    b.ToTable("FishFamilyCompatibility");

                    b.HasData(
                        new
                        {
                            ParentId = 1,
                            CompatibilityId = 2
                        },
                        new
                        {
                            ParentId = 1,
                            CompatibilityId = 3
                        },
                        new
                        {
                            ParentId = 1,
                            CompatibilityId = 4
                        });
                });

            modelBuilder.Entity("FishfolioAPI.Model.FishFamilyIncompatibility", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("CompatibilityId")
                        .HasColumnType("int");

                    b.Property<int?>("CompatibleId")
                        .HasColumnType("int");

                    b.HasKey("ParentId", "CompatibilityId");

                    b.HasIndex("CompatibleId");

                    b.ToTable("FishFamilyIncompatibility");

                    b.HasData(
                        new
                        {
                            ParentId = 1,
                            CompatibilityId = 5
                        },
                        new
                        {
                            ParentId = 1,
                            CompatibilityId = 6
                        });
                });

            modelBuilder.Entity("FishfolioAPI.Model.Habitat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Habitats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tropical waters of South America"
                        });
                });

            modelBuilder.Entity("FishfolioAPI.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "anakonjetic@gmail.com",
                            Password = "admin1",
                            UserType = 0,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("FishfolioAPI.Model.WaterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WaterTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Salty"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Fresh"
                        });
                });

            modelBuilder.Entity("FishfolioAPI.Model.Fish", b =>
                {
                    b.HasOne("FishfolioAPI.Model.FishFamily", "FishFamily")
                        .WithMany("Fish")
                        .HasForeignKey("FishFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishfolioAPI.Model.Habitat", "Habitat")
                        .WithMany("Fish")
                        .HasForeignKey("HabitatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishfolioAPI.Model.WaterType", "WaterType")
                        .WithMany("Fish")
                        .HasForeignKey("WaterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FishFamily");

                    b.Navigation("Habitat");

                    b.Navigation("WaterType");
                });

            modelBuilder.Entity("FishfolioAPI.Model.FishFamilyCompatibility", b =>
                {
                    b.HasOne("FishfolioAPI.Model.FishFamily", "Compatible")
                        .WithMany()
                        .HasForeignKey("CompatibleId");

                    b.HasOne("FishfolioAPI.Model.FishFamily", "Parent")
                        .WithMany("CompatibleWith")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Compatible");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FishfolioAPI.Model.FishFamilyIncompatibility", b =>
                {
                    b.HasOne("FishfolioAPI.Model.FishFamily", "Compatible")
                        .WithMany()
                        .HasForeignKey("CompatibleId");

                    b.HasOne("FishfolioAPI.Model.FishFamily", "Parent")
                        .WithMany("IncompatibleWith")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Compatible");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("FishfolioAPI.Model.FishFamily", b =>
                {
                    b.Navigation("CompatibleWith");

                    b.Navigation("Fish");

                    b.Navigation("IncompatibleWith");
                });

            modelBuilder.Entity("FishfolioAPI.Model.Habitat", b =>
                {
                    b.Navigation("Fish");
                });

            modelBuilder.Entity("FishfolioAPI.Model.WaterType", b =>
                {
                    b.Navigation("Fish");
                });
#pragma warning restore 612, 618
        }
    }
}
